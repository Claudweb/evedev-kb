<?php
/**
 * V2characterscharacterIdfittingsItems1
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * V2characterscharacterIdfittingsItems1 Class Doc Comment
 *
 * @category    Class */
 // @description item object
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V2characterscharacterIdfittingsItems1 implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v2characterscharacter_idfittings_items_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'flag' => 'string',
        'quantity' => 'int',
        'type_id' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'flag' => 'flag',
        'quantity' => 'quantity',
        'type_id' => 'type_id'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'flag' => 'setFlag',
        'quantity' => 'setQuantity',
        'type_id' => 'setTypeId'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'flag' => 'getFlag',
        'quantity' => 'getQuantity',
        'type_id' => 'getTypeId'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const FLAG_CARGO = 'Cargo';
    const FLAG_DRONE_BAY = 'DroneBay';
    const FLAG_FIGHTER_BAY = 'FighterBay';
    const FLAG_HI_SLOT0 = 'HiSlot0';
    const FLAG_HI_SLOT1 = 'HiSlot1';
    const FLAG_HI_SLOT2 = 'HiSlot2';
    const FLAG_HI_SLOT3 = 'HiSlot3';
    const FLAG_HI_SLOT4 = 'HiSlot4';
    const FLAG_HI_SLOT5 = 'HiSlot5';
    const FLAG_HI_SLOT6 = 'HiSlot6';
    const FLAG_HI_SLOT7 = 'HiSlot7';
    const FLAG_INVALID = 'Invalid';
    const FLAG_LO_SLOT0 = 'LoSlot0';
    const FLAG_LO_SLOT1 = 'LoSlot1';
    const FLAG_LO_SLOT2 = 'LoSlot2';
    const FLAG_LO_SLOT3 = 'LoSlot3';
    const FLAG_LO_SLOT4 = 'LoSlot4';
    const FLAG_LO_SLOT5 = 'LoSlot5';
    const FLAG_LO_SLOT6 = 'LoSlot6';
    const FLAG_LO_SLOT7 = 'LoSlot7';
    const FLAG_MED_SLOT0 = 'MedSlot0';
    const FLAG_MED_SLOT1 = 'MedSlot1';
    const FLAG_MED_SLOT2 = 'MedSlot2';
    const FLAG_MED_SLOT3 = 'MedSlot3';
    const FLAG_MED_SLOT4 = 'MedSlot4';
    const FLAG_MED_SLOT5 = 'MedSlot5';
    const FLAG_MED_SLOT6 = 'MedSlot6';
    const FLAG_MED_SLOT7 = 'MedSlot7';
    const FLAG_RIG_SLOT0 = 'RigSlot0';
    const FLAG_RIG_SLOT1 = 'RigSlot1';
    const FLAG_RIG_SLOT2 = 'RigSlot2';
    const FLAG_SERVICE_SLOT0 = 'ServiceSlot0';
    const FLAG_SERVICE_SLOT1 = 'ServiceSlot1';
    const FLAG_SERVICE_SLOT2 = 'ServiceSlot2';
    const FLAG_SERVICE_SLOT3 = 'ServiceSlot3';
    const FLAG_SERVICE_SLOT4 = 'ServiceSlot4';
    const FLAG_SERVICE_SLOT5 = 'ServiceSlot5';
    const FLAG_SERVICE_SLOT6 = 'ServiceSlot6';
    const FLAG_SERVICE_SLOT7 = 'ServiceSlot7';
    const FLAG_SUB_SYSTEM_SLOT0 = 'SubSystemSlot0';
    const FLAG_SUB_SYSTEM_SLOT1 = 'SubSystemSlot1';
    const FLAG_SUB_SYSTEM_SLOT2 = 'SubSystemSlot2';
    const FLAG_SUB_SYSTEM_SLOT3 = 'SubSystemSlot3';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFlagAllowableValues()
    {
        return [
            self::FLAG_CARGO,
            self::FLAG_DRONE_BAY,
            self::FLAG_FIGHTER_BAY,
            self::FLAG_HI_SLOT0,
            self::FLAG_HI_SLOT1,
            self::FLAG_HI_SLOT2,
            self::FLAG_HI_SLOT3,
            self::FLAG_HI_SLOT4,
            self::FLAG_HI_SLOT5,
            self::FLAG_HI_SLOT6,
            self::FLAG_HI_SLOT7,
            self::FLAG_INVALID,
            self::FLAG_LO_SLOT0,
            self::FLAG_LO_SLOT1,
            self::FLAG_LO_SLOT2,
            self::FLAG_LO_SLOT3,
            self::FLAG_LO_SLOT4,
            self::FLAG_LO_SLOT5,
            self::FLAG_LO_SLOT6,
            self::FLAG_LO_SLOT7,
            self::FLAG_MED_SLOT0,
            self::FLAG_MED_SLOT1,
            self::FLAG_MED_SLOT2,
            self::FLAG_MED_SLOT3,
            self::FLAG_MED_SLOT4,
            self::FLAG_MED_SLOT5,
            self::FLAG_MED_SLOT6,
            self::FLAG_MED_SLOT7,
            self::FLAG_RIG_SLOT0,
            self::FLAG_RIG_SLOT1,
            self::FLAG_RIG_SLOT2,
            self::FLAG_SERVICE_SLOT0,
            self::FLAG_SERVICE_SLOT1,
            self::FLAG_SERVICE_SLOT2,
            self::FLAG_SERVICE_SLOT3,
            self::FLAG_SERVICE_SLOT4,
            self::FLAG_SERVICE_SLOT5,
            self::FLAG_SERVICE_SLOT6,
            self::FLAG_SERVICE_SLOT7,
            self::FLAG_SUB_SYSTEM_SLOT0,
            self::FLAG_SUB_SYSTEM_SLOT1,
            self::FLAG_SUB_SYSTEM_SLOT2,
            self::FLAG_SUB_SYSTEM_SLOT3,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['flag'] = isset($data['flag']) ? $data['flag'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['type_id'] = isset($data['type_id']) ? $data['type_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['flag'] === null) {
            $invalid_properties[] = "'flag' can't be null";
        }
        $allowed_values = array("Cargo", "DroneBay", "FighterBay", "HiSlot0", "HiSlot1", "HiSlot2", "HiSlot3", "HiSlot4", "HiSlot5", "HiSlot6", "HiSlot7", "Invalid", "LoSlot0", "LoSlot1", "LoSlot2", "LoSlot3", "LoSlot4", "LoSlot5", "LoSlot6", "LoSlot7", "MedSlot0", "MedSlot1", "MedSlot2", "MedSlot3", "MedSlot4", "MedSlot5", "MedSlot6", "MedSlot7", "RigSlot0", "RigSlot1", "RigSlot2", "ServiceSlot0", "ServiceSlot1", "ServiceSlot2", "ServiceSlot3", "ServiceSlot4", "ServiceSlot5", "ServiceSlot6", "ServiceSlot7", "SubSystemSlot0", "SubSystemSlot1", "SubSystemSlot2", "SubSystemSlot3");
        if (!in_array($this->container['flag'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'flag', must be one of #{allowed_values}.";
        }

        if ($this->container['quantity'] === null) {
            $invalid_properties[] = "'quantity' can't be null";
        }
        if ($this->container['type_id'] === null) {
            $invalid_properties[] = "'type_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['flag'] === null) {
            return false;
        }
        $allowed_values = array("Cargo", "DroneBay", "FighterBay", "HiSlot0", "HiSlot1", "HiSlot2", "HiSlot3", "HiSlot4", "HiSlot5", "HiSlot6", "HiSlot7", "Invalid", "LoSlot0", "LoSlot1", "LoSlot2", "LoSlot3", "LoSlot4", "LoSlot5", "LoSlot6", "LoSlot7", "MedSlot0", "MedSlot1", "MedSlot2", "MedSlot3", "MedSlot4", "MedSlot5", "MedSlot6", "MedSlot7", "RigSlot0", "RigSlot1", "RigSlot2", "ServiceSlot0", "ServiceSlot1", "ServiceSlot2", "ServiceSlot3", "ServiceSlot4", "ServiceSlot5", "ServiceSlot6", "ServiceSlot7", "SubSystemSlot0", "SubSystemSlot1", "SubSystemSlot2", "SubSystemSlot3");
        if (!in_array($this->container['flag'], $allowed_values)) {
            return false;
        }
        if ($this->container['quantity'] === null) {
            return false;
        }
        if ($this->container['type_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets flag
     * @return string
     */
    public function getFlag()
    {
        return $this->container['flag'];
    }

    /**
     * Sets flag
     * @param string $flag Fitting location for the item. Entries placed in 'Invalid' will be discarded. If this leaves the fitting with nothing, it will cause an error.
     * @return $this
     */
    public function setFlag($flag)
    {
        $allowed_values = array('Cargo', 'DroneBay', 'FighterBay', 'HiSlot0', 'HiSlot1', 'HiSlot2', 'HiSlot3', 'HiSlot4', 'HiSlot5', 'HiSlot6', 'HiSlot7', 'Invalid', 'LoSlot0', 'LoSlot1', 'LoSlot2', 'LoSlot3', 'LoSlot4', 'LoSlot5', 'LoSlot6', 'LoSlot7', 'MedSlot0', 'MedSlot1', 'MedSlot2', 'MedSlot3', 'MedSlot4', 'MedSlot5', 'MedSlot6', 'MedSlot7', 'RigSlot0', 'RigSlot1', 'RigSlot2', 'ServiceSlot0', 'ServiceSlot1', 'ServiceSlot2', 'ServiceSlot3', 'ServiceSlot4', 'ServiceSlot5', 'ServiceSlot6', 'ServiceSlot7', 'SubSystemSlot0', 'SubSystemSlot1', 'SubSystemSlot2', 'SubSystemSlot3');
        if (!in_array($flag, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'flag', must be one of 'Cargo', 'DroneBay', 'FighterBay', 'HiSlot0', 'HiSlot1', 'HiSlot2', 'HiSlot3', 'HiSlot4', 'HiSlot5', 'HiSlot6', 'HiSlot7', 'Invalid', 'LoSlot0', 'LoSlot1', 'LoSlot2', 'LoSlot3', 'LoSlot4', 'LoSlot5', 'LoSlot6', 'LoSlot7', 'MedSlot0', 'MedSlot1', 'MedSlot2', 'MedSlot3', 'MedSlot4', 'MedSlot5', 'MedSlot6', 'MedSlot7', 'RigSlot0', 'RigSlot1', 'RigSlot2', 'ServiceSlot0', 'ServiceSlot1', 'ServiceSlot2', 'ServiceSlot3', 'ServiceSlot4', 'ServiceSlot5', 'ServiceSlot6', 'ServiceSlot7', 'SubSystemSlot0', 'SubSystemSlot1', 'SubSystemSlot2', 'SubSystemSlot3'");
        }
        $this->container['flag'] = $flag;

        return $this;
    }

    /**
     * Gets quantity
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param int $quantity quantity integer
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets type_id
     * @return int
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     * @param int $type_id type_id integer
     * @return $this
     */
    public function setTypeId($type_id)
    {
        $this->container['type_id'] = $type_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


